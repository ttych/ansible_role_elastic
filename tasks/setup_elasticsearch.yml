---

- name: install elasticsearch
  include: install_elasticsearch.yml
  become: yes
  become_user: "{{ elastic_user }}"


- name: configure elasticsearch.yml
  lineinfile:
    path: "{{ elastic_elasticsearch_conf_file }}"
    regexp: '^{{ item.key }}:'
    line: "{{ item.key }}: {{ item.value }}"
  loop: "{{ elastic_elasticsearch_confs }}"

- name: configure jvm.options
  lineinfile:
    path: "{{ elastic_elasticsearch_jvm_options_file }}"
    regexp: '^{{ item.key }}'
    line: "{{ item.key }}{{ item.value }}"
  loop: "{{ elastic_elasticsearch_jvm_options }}"

- name: configure log4j2.properties
  lineinfile:
    path: "{{ elastic_elasticsearch_jvm_options_file }}"
    regexp: '^{{ item.key }} ='
    line: "{{ item.key }} = {{ item.value }}"
  loop: "{{ elastic_elasticsearch_log4j2_properties }}"


- name: setup daemontools service for elasticsearch
  block:
    - name: create daemontools workspaces
      file:
        path: "{{ elastic_daemontools_dir }}/elasticsearch/{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        state: directory
      loop: "{{ elastic_daemontools_directories_template }}"

    - name: deploy daemontools run scripts
      template:
        src: "svscan/elasticsearch/{{ item.path }}"
        dest: "{{ elastic_daemontools_dir }}/elasticsearch/{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop: "{{ elastic_daemontools_scripts_template }}"

    - name: supervise (link) daemontools services
      file:
        src: "{{ elastic_daemontools_dir }}/{{ item }}"
        dest: "{{ daemontools_svscan_dir }}/elastic_{{ item }}"
        state: link
      loop:
        - elasticsearch

  when: has_daemontools|d(false)


- name: start standard service
  block:
    - fail:
        msg: "not implemented"

  when: not has_daemontools|d(false)
